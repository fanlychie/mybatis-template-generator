package ${basePackage}.service.impl;

import java.util.List;
import ${basePackage}.entity.Entity;
import org.apache.commons.logging.Log;
import ${basePackage}.mapper.BaseMapper;
import ${basePackage}.service.BaseService;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;

public class BaseServiceImpl<T extends Entity> implements BaseService<T> {
	
	@Autowired
	private BaseMapper<T> mapper;

	protected Log logger = LogFactory.getLog(getClass());

	@Override
	public boolean insert(T entity) {
		try {
			if (entity != null) {
				return mapper.insert(entity) == 1;
			} else {
				logger.warn("对象为 null, 保存操作未能正确执行");
				return false;
			}
		} catch (Throwable e) {
			logger.error("保存数据发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean update(T entity) {
		try {
			if (entity != null) {
				return mapper.update(entity) == 1;
			} else {
				logger.warn("对象为 null, 更新操作未能正确执行");
				return false;
			}
		} catch (Throwable e) {
			logger.error("更新数据发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean delete(T entity) {
		try {
			if (entity != null) {
				return mapper.delete(entity) == 1;
			} else {
				logger.warn("对象为 null, 删除操作未能正确执行");
				return false;
			}
		} catch (Throwable e) {
			logger.error("删除数据发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean delete(Object id) {
		try {
			if (id != null) {
				return mapper.deleteById(id) == 1;
			} else {
				logger.warn("主键为 null, 删除操作未能正确执行");
				return false;
			}
		} catch (Throwable e) {
			logger.error("删除数据发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public long selectCount() {
		try {
			return mapper.selectCount(null);
		} catch (Throwable e) {
			logger.error("统计数据记录发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public long selectCount(T entity) {
		try {
			return mapper.selectCount(entity);
		} catch (Throwable e) {
			logger.error("统计数据记录发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public T selectOne(T entity) {
		try {
			return entity == null ? null : mapper.selectOne(entity);
		} catch (Throwable e) {
			logger.error("依据主键获取记录发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public T selectOne(Object id) {
		try {
			return id == null ? null : mapper.selectById(id);
		} catch (Throwable e) {
			logger.error("依据主键获取记录发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public List<T> selectList(T entity) {
		try {
			return mapper.selectList(entity);
		} catch (Throwable e) {
			logger.error("获取记录列表数据发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean batchInsert(List<T> entities) {
		try {
			if (entities != null && entities.size() > 0) {
				return mapper.batchInsert(entities) == entities.size();
			} else {
				logger.warn("集合为空, 批量保存操作未能正确执行");
				return false;
			}
		} catch (Throwable e) {
			logger.error("批量保存数据发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean batchDelete(List<T> entities) {
		try {
			if (entities != null && entities.size() > 0) {
				return mapper.batchDelete(entities) == entities.size();
			} else {
				logger.warn("对象集合为空, 批量删除操作未能正确执行");
				return false;
			}
		} catch (Throwable e) {
			logger.error("批量删除数据发生异常", e);
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean batchDelete(Object... ids) {
		try {
			if (ids != null && ids.length > 0) {
				return mapper.batchDeleteById(ids) == ids.length;
			} else {
				logger.warn("主键集合为空, 批量删除操作未能正确执行");
				return false;
			}
		} catch (Throwable e) {
			logger.error("批量删除数据发生异常", e);
			throw new RuntimeException(e);
		}
	}

}